title: "Git Clone Repository"
summary: The Step checks out the defined repository state, optionally updates the repository submodules and exports the achieved git repository state properties.
description: |
   The checkout process depends on the checkout properties: the Step either checks out a repository state defined by a git commit or a git tag, or achieves a merged state of a pull / merge request.
   The Step uses two solutions to achieve the merged state of the pull / merge request: auto merge in the case of a merge branch or diff file (provided by the Git service) and manual merge otherwise.
   Once the desired state is checked out, the Step optionally updates the submodules. In the case of pull / merge request, the Step checks out a detach head and exports the achieved git state properties.
   
   ### Configuring the Step
   
   1. The **Git repository URL** and the ** Clone destination (local)directory path** fields are required fields and are automatically filled out based on your project settings.
   Optionally, you can modify the following fields in the **Clone Config** section:
   1. You can set the **Update the registered submodules?** option to `yes` to pull the most up-to-date version of the submodule from the submodule's repository.
   2. You can set the number of commits you want the Step to fetch in the **Limit fetching to the specified number of commits** option. Make sure you set a decimal number.
   
   Other **Clone config** inputs are not editable unless you go to the **bitrise.yml** tab, however, to avoid issues, we suggest you to contact our Support team instead.
   
   ### Troubleshooting
   If you have GitHub Enterprise set up, it works slightly differently on [bitrise.io](https://www.bitrise.io) than on [github.com](https://github.com). You have to manually set the git clone URL, register the SSH key and the webhook.
   If you face network issues in the case of self-hosted git servers, we advise you to contact our Support Team to help you out.
   If you face slow clone speed, set the **Limit fetching to the specified number of commits** to the number of commits you want to clone instead of cloning the whole commit history or you can use the Git LFS solution provided by the git provider.
    
   ### Useful links
   
   - [How to register a GitHub Enterprise repository](https://discuss.bitrise.io/t/how-to-register-a-github-enterprise-repository/218)
   - [Code security](https://devcenter.bitrise.io/getting-started/code-security/)
   
   ### Related Steps
    
   - [Activate SSH key (RSA private key)](https://www.bitrise.io/integrations/steps/activate-ssh-key)
   - [Bitrise.io Cache:Pull](https://www.bitrise.io/integrations/steps/cache-pull)
   - [Bitrise.io Cache:Push](https://www.bitrise.io/integrations/steps/cache-push)

website: https://github.com/bitrise-steplib/steps-git-clone
source_code_url: https://github.com/bitrise-steplib/steps-git-clone
support_url: https://github.com/bitrise-steplib/steps-git-clone/issues
type_tags:
  - utility
is_requires_admin_user: false
is_always_run: false
is_skippable: false
run_if: .IsCI
toolkit:
  go:
    package_name: github.com/bitrise-steplib/steps-git-clone
inputs:
  - repository_url: "$GIT_REPOSITORY_URL"
    opts:
      title: "Git repository URL"
      is_required: true
      is_dont_change_value: true
  - clone_into_dir: "$BITRISE_SOURCE_DIR"
    opts:
      title: "Clone destination (local) directory path"
      is_required: true
  - http_user: "$BITRISE_GIT_HTTP_USER"
    opts:
      category: Clone Config
      title: "If using HTTP, the user to authenticate with."
      is_dont_change_value: true
      is_sensitive: true
  - http_token: "$BITRISE_GIT_HTTP_TOKEN"
    opts:
      category: Clone Config
      title: "If using HTTP, the token to authenticate with."
      is_dont_change_value: true
      is_sensitive: true
  - commit: "$BITRISE_GIT_COMMIT"
    opts:
      category: Clone Config
      title: "Git Commit to clone"
      is_dont_change_value: true
  - tag: "$BITRISE_GIT_TAG"
    opts:
      category: Clone Config
      title: "Git Tag to clone"
      is_dont_change_value: true
  - branch: "$BITRISE_GIT_BRANCH"
    opts:
      category: Clone Config
      title: "Git Branch to clone"
      is_dont_change_value: true
  - branch_dest: "$BITRISEIO_GIT_BRANCH_DEST"
    opts:
      category: Clone Config
      title: "Destination git Branch, used for pull requests"
      is_dont_change_value: true
  - pull_request_id: "$PULL_REQUEST_ID"
    opts:
      category: Clone Config
      title: "Pull request ID on GitHub"
      is_dont_change_value: true
  - pull_request_repository_url: "$BITRISEIO_PULL_REQUEST_REPOSITORY_URL"
    opts:
      category: Clone Config
      title: "Pull request git URL"
      is_dont_change_value: true
  - pull_request_merge_branch: "$BITRISEIO_PULL_REQUEST_MERGE_BRANCH"
    opts:
      category: Clone Config
      title: "Merged pull request branch"
      is_dont_change_value: true
  - update_submodules: "yes"
    opts:
      category: Clone Config
      title: Update the registered submodules?
      summary: |-
        Update the registered submodules?
      description: |-
        Update the registered submodules?
      value_options:
      - "yes"
      - "no"
  - ssl_verify: "yes"
    opts:
      category: Clone Config
      title: Verify SSL when connecting to remote?
      summary: |-
        Verify SSL when connecting to remote?
      description: |-
        Some repository hosts may not have a valid certificate chain. Set this to "no" in 
        order to bypass SSL verification when making the connection to the remote host.
      value_options:
      - "yes"
      - "no"
  - clone_depth:
    opts:
      category: Clone Config
      title: "Limit fetching to the specified number of commits"
      description: |-
        Limit fetching to the specified number of commits.
        The value should be a decimal number, for example `10`.
  - reset_repository: "No"
    opts:
      category: Debug
      summary: Reset repository contents with git reset --hard HEAD and git clean -f after repository updated
      title: Reset repository
      value_options:
      - "No"
      - "Yes"
  - manual_merge: "yes"
    opts:
      category: Debug
      title: Manual merge
      summary:  Prefer to do a manual `git merge` by default.
      description: |-
        Prefer to do a manual `git merge` by default.
        When the Pull Request is from a GitHub or Bitbucket private fork repository set this to `"no"`.
      value_options:
      - "yes"
      - "no"
  - build_url: "$BITRISE_BUILD_URL"
    opts:
      category: Debug
      title: "Bitrise Build URL"
      summary: |-
        Unique build URL of this build on Bitrise.io
      description: |-
        Unique build URL of this build on Bitrise.io
      is_dont_change_value: true
  - build_api_token: "$BITRISE_BUILD_API_TOKEN"
    opts:
      category: Debug
      title: Bitrise Build API Token
      summary: |-
        The build's API Token for the build on Bitrise.io
      description: |-
        The build's API Token for the build on Bitrise.io
      is_dont_change_value: true
      is_sensitive: true
outputs:
  - GIT_CLONE_COMMIT_HASH:
    opts:
      title: "Cloned git commit's commit hash"
  - GIT_CLONE_COMMIT_MESSAGE_SUBJECT:
    opts:
      title: "Cloned git commit's message subject"
  - GIT_CLONE_COMMIT_MESSAGE_BODY:
    opts:
      title: "Cloned git commit's message body"
  - GIT_CLONE_COMMIT_COUNT:
    opts:
      title: "Cloned git commit counts"
      description: |-
        Count will only work properly if no `--depth` option is set.

        If `--depth` is set then the history truncated to the specified number of commits. Count will **not** fail but will be the clone depth.
  - GIT_CLONE_COMMIT_AUTHOR_NAME:
    opts:
      title: "Cloned git commit's author name"
  - GIT_CLONE_COMMIT_AUTHOR_EMAIL:
    opts:
      title: "Cloned git commit's author email address"
  - GIT_CLONE_COMMIT_COMMITER_NAME:
    opts:
      title: "Cloned git commit's committer name"
  - GIT_CLONE_COMMIT_COMMITER_EMAIL:
    opts:
      title: "Cloned git commit's committer email"
